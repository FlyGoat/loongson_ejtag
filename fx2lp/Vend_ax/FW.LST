C51 COMPILER V7.07   FW                                                                    05/17/2014 14:52:03 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE FW
OBJECT MODULE PLACED IN FW.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE FW.C OPTIMIZE(6,SPEED) DEFINE(NO_RENUM) DEBUG OBJECTEXTEND

stmt level    source

   1          //-----------------------------------------------------------------------------
   2          //   File:      fw.c
   3          //   Contents:  Firmware frameworks task dispatcher and device request parser
   4          //
   5          // $Archive: /USB/Examples/FX2LP/hid_kb/fw.c $
   6          // $Date: 5/25/04 4:32p $
   7          // $Revision: 6 $
   8          //
   9          //
  10          //-----------------------------------------------------------------------------
  11          // Copyright 2003, Cypress Semiconductor Corporation
  12          //-----------------------------------------------------------------------------
  13          #include "lp.h"
  14          #include "lpregs.h"
  15          #include "syncdly.h"            // SYNCDELAY macro
  16          
  17          //-----------------------------------------------------------------------------
  18          // Constants
  19          //-----------------------------------------------------------------------------
  20          #define DELAY_COUNT   0x9248*8L  // Delay for 8 sec at 24Mhz, 4 sec at 48
  21          #define _IFREQ  48000            // IFCLK constant for Synchronization Delay
  22          #define _CFREQ  48000            // CLKOUT constant for Synchronization Delay
  23          
  24          //-----------------------------------------------------------------------------
  25          // Random Macros
  26          //-----------------------------------------------------------------------------
  27          #define   min(a,b) (((a)<(b))?(a):(b))
  28          #define   max(a,b) (((a)>(b))?(a):(b))
  29          
  30          //-----------------------------------------------------------------------------
  31          // Global Variables
  32          //-----------------------------------------------------------------------------
  33          volatile BOOL   GotSUD;
  34          BOOL      Rwuen;
  35          BOOL      Selfpwr;
  36          volatile BOOL   Sleep;                  // Sleep mode enable flag
  37          
  38          WORD   pDeviceDscr;   // Pointer to Device Descriptor; Descriptors may be moved
  39          WORD   pDeviceQualDscr;
  40          WORD   pHighSpeedConfigDscr;
  41          WORD   pFullSpeedConfigDscr;   
  42          WORD   pConfigDscr;
  43          WORD   pOtherConfigDscr;   
  44          WORD   pStringDscr;   
  45          
  46          //-----------------------------------------------------------------------------
  47          // Prototypes
  48          //-----------------------------------------------------------------------------
  49          void SetupCommand(void);
  50          void TD_Init(void);
  51          void TD_Poll(void);
  52          BOOL TD_Suspend(void);
  53          BOOL TD_Resume(void);
  54          
  55          BOOL DR_GetDescriptor(void);
C51 COMPILER V7.07   FW                                                                    05/17/2014 14:52:03 PAGE 2   

  56          BOOL DR_SetConfiguration(void);
  57          BOOL DR_GetConfiguration(void);
  58          BOOL DR_SetInterface(void);
  59          BOOL DR_GetInterface(void);
  60          BOOL DR_GetStatus(void);
  61          BOOL DR_ClearFeature(void);
  62          BOOL DR_SetFeature(void);
  63          BOOL DR_VendorCmnd(void);
  64          
  65          // this table is used by the epcs macro 
  66          const char code  EPCS_Offset_Lookup_Table[] =
  67          {
  68             0,    // EP1OUT
  69             1,    // EP1IN
  70             2,    // EP2OUT
  71             2,    // EP2IN
  72             3,    // EP4OUT
  73             3,    // EP4IN
  74             4,    // EP6OUT
  75             4,    // EP6IN
  76             5,    // EP8OUT
  77             5,    // EP8IN
  78          };
  79          
  80          // macro for generating the address of an endpoint's control and status register (EPnCS)
  81          #define epcs(EP) (EPCS_Offset_Lookup_Table[(EP & 0x7E) | (EP > 128)] + 0xE6A1)
  82          
  83          //-----------------------------------------------------------------------------
  84          // Code
  85          //-----------------------------------------------------------------------------
  86          
  87          // Task dispatcher
  88          void main(void)
  89          {
  90   1         DWORD   i;
  91   1         WORD   offset;
  92   1         DWORD   DevDescrLen;
  93   1         DWORD   j=0;
  94   1         WORD   IntDescrAddr;
  95   1         WORD   ExtDescrAddr;
  96   1      
  97   1         // Initialize Global States
  98   1         Sleep = FALSE;               // Disable sleep mode
  99   1         Rwuen = FALSE;               // Disable remote wakeup
 100   1         Selfpwr = FALSE;            // Disable self powered
 101   1         GotSUD = FALSE;               // Clear "Got setup data" flag
 102   1      
 103   1         // Initialize user device
 104   1         TD_Init();
 105   1      
 106   1         // The following section of code is used to relocate the descriptor table. 
 107   1         // The frameworks uses SUDPTRH and SUDPTRL to automate the SETUP requests
 108   1         // for descriptors.  These registers only work with memory locations
 109   1         // in the EZ-USB internal RAM.  Therefore, if the descriptors are located
 110   1         // in external RAM, they must be copied to in internal RAM.  
 111   1         // The descriptor table is relocated by the frameworks ONLY if it is found 
 112   1         // to be located in external memory.
 113   1         pDeviceDscr = (WORD)&DeviceDscr;
 114   1         pDeviceQualDscr = (WORD)&DeviceQualDscr;
 115   1         pHighSpeedConfigDscr = (WORD)&HighSpeedConfigDscr;
 116   1         pFullSpeedConfigDscr = (WORD)&FullSpeedConfigDscr;
 117   1         pStringDscr = (WORD)&StringDscr;
C51 COMPILER V7.07   FW                                                                    05/17/2014 14:52:03 PAGE 3   

 118   1      
 119   1         // Is the descriptor table in external RAM (> 16Kbytes)?  If yes,
 120   1         // then relocate.
 121   1         // Note that this code only checks if the descriptors START in 
 122   1         // external RAM.  It will not work if the descriptor table spans
 123   1         // internal and external RAM.
 124   1         if ((WORD)&DeviceDscr & 0xC000)
 125   1         {
 126   2            // first, relocate the descriptors
 127   2            IntDescrAddr = INTERNAL_DSCR_ADDR;
 128   2            ExtDescrAddr = (WORD)&DeviceDscr;
 129   2            DevDescrLen = (WORD)&UserDscr - (WORD)&DeviceDscr + 2;
 130   2            for (i = 0; i < DevDescrLen; i++)
 131   2               *((BYTE xdata *)IntDescrAddr+i) = *((BYTE xdata *)ExtDescrAddr+i);
 132   2      
 133   2            // update all of the descriptor pointers
 134   2            pDeviceDscr = IntDescrAddr;
 135   2            offset = (WORD)&DeviceDscr - INTERNAL_DSCR_ADDR;
 136   2            pDeviceQualDscr -= offset;
 137   2            pConfigDscr -= offset;
 138   2            pOtherConfigDscr -= offset;
 139   2            pHighSpeedConfigDscr -= offset;
 140   2            pFullSpeedConfigDscr -= offset;
 141   2            pStringDscr -= offset;
 142   2         }
 143   1      
 144   1         EZUSB_IRQ_ENABLE();            // Enable USB interrupt (INT2)
 145   1         EZUSB_ENABLE_RSMIRQ();            // Wake-up interrupt
 146   1      
 147   1         INTSETUP |= (bmAV2EN | bmAV4EN);     // Enable INT 2 & 4 autovectoring
 148   1      
 149   1         USBIE |= bmSUDAV | bmSUTOK | bmSUSP | bmURES | bmHSGRANT;   // Enable selected interrupts
 150   1         EA = 1;                  // Enable 8051 interrupts
 151   1      
 152   1      #ifndef NO_RENUM
                 // Renumerate if necessary.  Do this by checking the renum bit.  If it
                 // is already set, there is no need to renumerate.  The renum bit will
                 // already be set if this firmware was loaded from an eeprom.
                 if(!(USBCS & bmRENUM))
                 {
                     EZUSB_Discon(TRUE);   // renumerate
                 }
              #endif
 161   1      
 162   1         // unconditionally re-connect.  If we loaded from eeprom we are
 163   1         // disconnected and need to connect.  If we just renumerated this
 164   1         // is not necessary but doesn't hurt anything
 165   1         USBCS &=~bmDISCON;
 166   1      
 167   1         CKCON = (CKCON&(~bmSTRETCH)) | FW_STRETCH_VALUE; // Set stretch
 168   1      
 169   1         // clear the Sleep flag.
 170   1         Sleep = FALSE;
 171   1      
 172   1         // Task Dispatcher
 173   1         while(TRUE)               // Main Loop
 174   1         {
 175   2            // Poll User Device
 176   2            TD_Poll();
 177   2      
 178   2            // Check for pending SETUP
 179   2            if(GotSUD)
C51 COMPILER V7.07   FW                                                                    05/17/2014 14:52:03 PAGE 4   

 180   2            {
 181   3               SetupCommand();          // Implement setup command
 182   3               GotSUD = FALSE;          // Clear SETUP flag
 183   3            }
 184   2      
 185   2            // check for and handle suspend.
 186   2            // NOTE: Idle mode stops the processor clock.  There are only two
 187   2            // ways out of idle mode, the WAKEUP pin, and detection of the USB
 188   2            // resume state on the USB bus.  The timers will stop and the
 189   2            // processor will not wake up on any other interrupts.
 190   2            if (Sleep)
 191   2            {
 192   3               if(TD_Suspend())
 193   3               { 
 194   4                  Sleep = FALSE;     // Clear the "go to sleep" flag.  Do it here to prevent any race condition 
             -between wakeup and the next sleep.
 195   4                  do
 196   4                  {
 197   5                     EZUSB_Susp();         // Place processor in idle mode.
 198   5                  }
 199   4                  while(!Rwuen && EZUSB_EXTWAKEUP());
 200   4                  // above.  Must continue to go back into suspend if the host has disabled remote wakeup
 201   4                  // *and* the wakeup was caused by the external wakeup pin.
 202   4      
 203   4                  // 8051 activity will resume here due to USB bus or Wakeup# pin activity.
 204   4                  EZUSB_Resume();   // If source is the Wakeup# pin, signal the host to Resume.      
 205   4                  TD_Resume();
 206   4               }   
 207   3            }
 208   2      
 209   2         }
 210   1      }
 211          
 212          BOOL HighSpeedCapable()
 213          {
 214   1         // this function determines if the chip is high-speed capable.
 215   1         // FX2 and FX2LP are high-speed capable. FX1 is not - it does
 216   1         // not have a high-speed transceiver.  The frameworks determines
 217   1         // the chip's speed capability at run time to allow fx2lp and
 218   1         // fx1 object code compatibilty.
 219   1      
 220   1         if (REVID & 0xF0)    // check for fx2lp/fx1 v. fx2.  
 221   1         {
 222   2               
 223   2            // this is a fx2lp or fx1 because non-zero upper nibble in chip rev
 224   2            // now check the capabilities register
 225   2            if (GPCR2 & bmHIGHSPEEDCAPABLE)
 226   2               return TRUE;
 227   2            else
 228   2               return FALSE;
 229   2         }
 230   1         else
 231   1         {
 232   2            // fx2 is always high-speed capable
 233   2            return TRUE;
 234   2         }
 235   1      }   
 236          
 237          // Device request parser
 238          void SetupCommand(void)
 239          {
 240   1         void   *dscr_ptr;
C51 COMPILER V7.07   FW                                                                    05/17/2014 14:52:03 PAGE 5   

 241   1      
 242   1         switch(SETUPDAT[1])
 243   1         {
 244   2            case SC_GET_DESCRIPTOR:                  // *** Get Descriptor
 245   2               if(DR_GetDescriptor())
 246   2                  switch(SETUPDAT[3])         
 247   2                  {
 248   3                     case GD_DEVICE:            // Device
 249   3                        SUDPTRH = MSB(pDeviceDscr);
 250   3                        SUDPTRL = LSB(pDeviceDscr);
 251   3                        break;
 252   3                     case GD_DEVICE_QUALIFIER:            // Device Qualifier
 253   3                                        // only retuen a device qualifier if this is a high speed
 254   3                                        // capable chip.
 255   3                                        if (HighSpeedCapable())
 256   3                                        {
 257   4                                SUDPTRH = MSB(pDeviceQualDscr);
 258   4                                SUDPTRL = LSB(pDeviceQualDscr);
 259   4                                        }
 260   3                                        else
 261   3                                        {
 262   4                                                EZUSB_STALL_EP0();
 263   4                                        }
 264   3                                        break;
 265   3                     case GD_CONFIGURATION:         // Configuration
 266   3                        SUDPTRH = MSB(pConfigDscr);
 267   3                        SUDPTRL = LSB(pConfigDscr);
 268   3                        break;
 269   3                     case GD_OTHER_SPEED_CONFIGURATION:  // Other Speed Configuration
 270   3                        SUDPTRH = MSB(pOtherConfigDscr);
 271   3                        SUDPTRL = LSB(pOtherConfigDscr);
 272   3                        break;
 273   3                     case GD_STRING:            // String
 274   3                        if(dscr_ptr = (void *)EZUSB_GetStringDscr(SETUPDAT[2]))
 275   3                        {
 276   4                           SUDPTRH = MSB(dscr_ptr);
 277   4                           SUDPTRL = LSB(dscr_ptr);
 278   4                        }
 279   3                        else 
 280   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 281   3                        break;
 282   3                     default:            // Invalid request
 283   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 284   3                  }
 285   2               break;
 286   2            case SC_GET_INTERFACE:                  // *** Get Interface
 287   2               DR_GetInterface();
 288   2               break;
 289   2            case SC_SET_INTERFACE:                  // *** Set Interface
 290   2               DR_SetInterface();
 291   2               break;
 292   2            case SC_SET_CONFIGURATION:               // *** Set Configuration
 293   2               DR_SetConfiguration();
 294   2               break;
 295   2            case SC_GET_CONFIGURATION:               // *** Get Configuration
 296   2               DR_GetConfiguration();
 297   2               break;
 298   2            case SC_GET_STATUS:                  // *** Get Status
 299   2               if(DR_GetStatus())
 300   2                  switch(SETUPDAT[0])
 301   2                  {
 302   3                     case GS_DEVICE:            // Device
C51 COMPILER V7.07   FW                                                                    05/17/2014 14:52:03 PAGE 6   

 303   3                        EP0BUF[0] = ((BYTE)Rwuen << 1) | (BYTE)Selfpwr;
 304   3                        EP0BUF[1] = 0;
 305   3                        EP0BCH = 0;
 306   3                        EP0BCL = 2;
 307   3                        break;
 308   3                     case GS_INTERFACE:         // Interface
 309   3                        EP0BUF[0] = 0;
 310   3                        EP0BUF[1] = 0;
 311   3                        EP0BCH = 0;
 312   3                        EP0BCL = 2;
 313   3                        break;
 314   3                     case GS_ENDPOINT:         // End Point
 315   3                        EP0BUF[0] = *(BYTE xdata *) epcs(SETUPDAT[4]) & bmEPSTALL;
 316   3                        EP0BUF[1] = 0;
 317   3                        EP0BCH = 0;
 318   3                        EP0BCL = 2;
 319   3                        break;
 320   3                     default:            // Invalid Command
 321   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 322   3                  }
 323   2               break;
 324   2            case SC_CLEAR_FEATURE:                  // *** Clear Feature
 325   2               if(DR_ClearFeature())
 326   2                  switch(SETUPDAT[0])
 327   2                  {
 328   3                     case FT_DEVICE:            // Device
 329   3                        if(SETUPDAT[2] == 1)
 330   3                           Rwuen = FALSE;       // Disable Remote Wakeup
 331   3                        else
 332   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 333   3                        break;
 334   3                     case FT_ENDPOINT:         // End Point
 335   3                        if(SETUPDAT[2] == 0)
 336   3                        {
 337   4                           *(BYTE xdata *) epcs(SETUPDAT[4]) &= ~bmEPSTALL;
 338   4                           EZUSB_RESET_DATA_TOGGLE( SETUPDAT[4] );
 339   4                        }
 340   3                        else
 341   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 342   3                        break;
 343   3                  }
 344   2               break;
 345   2            case SC_SET_FEATURE:                  // *** Set Feature
 346   2               if(DR_SetFeature())
 347   2                  switch(SETUPDAT[0])
 348   2                  {
 349   3                     case FT_DEVICE:            // Device
 350   3                        if(SETUPDAT[2] == 1)
 351   3                           Rwuen = TRUE;      // Enable Remote Wakeup
 352   3                        else if(SETUPDAT[2] == 2)
 353   3                           // Set Feature Test Mode.  The core handles this request.  However, it is
 354   3                           // necessary for the firmware to complete the handshake phase of the
 355   3                           // control transfer before the chip will enter test mode.  It is also
 356   3                           // necessary for FX2 to be physically disconnected (D+ and D-)
 357   3                           // from the host before it will enter test mode.
 358   3                           break;
 359   3                        else
 360   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 361   3                        break;
 362   3                     case FT_ENDPOINT:         // End Point
 363   3                        *(BYTE xdata *) epcs(SETUPDAT[4]) |= bmEPSTALL;
 364   3                        break;
C51 COMPILER V7.07   FW                                                                    05/17/2014 14:52:03 PAGE 7   

 365   3                     default:
 366   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 367   3                  }
 368   2               break;
 369   2            default:                     // *** Invalid Command
 370   2               if(DR_VendorCmnd())
 371   2                  EZUSB_STALL_EP0();            // Stall End Point 0
 372   2         }
 373   1      
 374   1         // Acknowledge handshake phase of device request
 375   1         EP0CS |= bmHSNAK;
 376   1      }
 377          
 378          // Wake-up interrupt handler
 379          void resume_isr(void) interrupt WKUP_VECT
 380          {
 381   1         EZUSB_CLEAR_RSMIRQ();
 382   1      }
 383          
 384          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1068    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
